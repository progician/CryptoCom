#include "catch2/catch.hpp"
#include "CryptoCom/ElGamal.h"
#include <iostream>

#include <limits>


using namespace CryptoCom;

namespace CryptoCom::ElGamal {
  auto operator==(ElGamal::Cipher const& lhs, ElGamal::Cipher const& rhs) -> bool {
    return lhs.c1 == rhs.c1 && lhs.c2 == rhs.c2;
  }

  auto operator<<(std::ostream& ostr, ElGamal::Cipher const& cipher) -> std::ostream& {
    ostr << "{" << cipher.c1 << ", " << cipher.c2 << "}";
    return ostr;
  }
}


TEST_CASE("Keys are generated by scrambling a random number with modulo exponent") {
  constexpr auto const SecretNumber = 79;
  auto rng_for_key = std::function<int()>{[SecretNumber](){ return SecretNumber; }};

  constexpr auto const Order = 8009;
  constexpr auto const Generator = 1131;
  auto const keys = ElGamal::ElGamal::GenerateKeys(Order, Generator, rng_for_key);
  REQUIRE(keys == std::make_pair(SecretNumber, 7697));

  SECTION("encoding") {
    constexpr auto const Message = 102;
    auto rng_for_encryption = std::function<int()>{[SecretNumber](){ return 90; }};
    auto cipher = ElGamal::ElGamal::Encrypt(Message, keys.second, Order, Generator, rng_for_encryption);
    REQUIRE(cipher == ElGamal::ElGamal::Cipher{6603, 5571});

    SECTION("decoding") {
      auto decrypted = ElGamal::ElGamal::Decrypt(cipher, keys.first, Order, Generator);
      REQUIRE(decrypted == Message);
    }
  }
}